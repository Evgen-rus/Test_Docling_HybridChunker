import re
from datetime import datetime
from typing import List, Dict

class SimpleChunk:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–∞"""
    def __init__(self, text: str, heading: str, stage_number: int):
        self.text = text
        self.heading = heading
        self.stage_number = stage_number
        self.size = len(text)

class SimpleChunker:
    """
    –ü—Ä–æ—Å—Ç–æ–π —á–∞–Ω–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —ç—Ç–∞–ø–æ–≤
    """
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —ç—Ç–∞–ø–æ–≤
        self.stage_pattern = r'^## –≠—Ç–∞–ø (\d+)'
        
    def chunk_by_stages(self, file_path: str) -> List[SimpleChunk]:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º
        
        Args:
            file_path: –ø—É—Ç—å –∫ markdown —Ñ–∞–π–ª—É
            
        Returns:
            —Å–ø–∏—Å–æ–∫ SimpleChunk –æ–±—ä–µ–∫—Ç–æ–≤
        """
        print(f"üìÑ –ß–∏—Ç–∞—é —Ñ–∞–π–ª: {file_path}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("‚úÇÔ∏è –†–∞–∑–±–∏–≤–∞—é –ø–æ —ç—Ç–∞–ø–∞–º...")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = content.split('\n')
        chunks = []
        current_chunk = []
        current_heading = ""
        current_stage = 0
        
        for line in lines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —ç—Ç–∞–ø–∞
            stage_match = re.match(self.stage_pattern, line)
            
            if stage_match:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞–Ω–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if current_chunk and current_heading:
                    chunk_text = '\n'.join(current_chunk).strip()
                    if chunk_text:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        chunks.append(SimpleChunk(
                            text=chunk_text,
                            heading=current_heading,
                            stage_number=current_stage
                        ))
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫
                current_stage = int(stage_match.group(1))
                current_heading = line.strip()
                current_chunk = [line]
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞–Ω–∫—É
                current_chunk.append(line)
        
        # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk and current_heading:
            chunk_text = '\n'.join(current_chunk).strip()
            if chunk_text:
                chunks.append(SimpleChunk(
                    text=chunk_text,
                    heading=current_heading,
                    stage_number=current_stage
                ))
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º")
        return chunks

def save_chunks_to_markdown(chunks: List[SimpleChunk], filename: str = "simple_chunks.md"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞–Ω–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã–π Markdown —Ñ–∞–π–ª
    
    Args:
        chunks: —Å–ø–∏—Å–æ–∫ SimpleChunk –æ–±—ä–µ–∫—Ç–æ–≤
        filename: –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    with open(filename, "w", encoding="utf-8") as f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        f.write("# –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —ç—Ç–∞–ø–∞–º\n\n")
        f.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        f.write(f"**–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤:** {len(chunks)}\n\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_chars = sum(chunk.size for chunk in chunks)
        avg_size = total_chars // len(chunks) if chunks else 0
        
        f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n")
        f.write(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:** {total_chars:,}\n")
        f.write(f"- **–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —ç—Ç–∞–ø–∞:** {avg_size:,} —Å–∏–º–≤–æ–ª–æ–≤\n")
        f.write(f"- **–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —ç—Ç–∞–ø:** {max(chunk.size for chunk in chunks):,} —Å–∏–º–≤–æ–ª–æ–≤\n")
        f.write(f"- **–°–∞–º—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —ç—Ç–∞–ø:** {min(chunk.size for chunk in chunks):,} —Å–∏–º–≤–æ–ª–æ–≤\n\n")
        
        f.write("---\n\n")
        
        # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        f.write("## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n\n")
        for chunk in chunks:
            f.write(f"- [–≠—Ç–∞–ø {chunk.stage_number}](#—ç—Ç–∞–ø-{chunk.stage_number})\n")
        f.write("\n---\n\n")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã
        for i, chunk in enumerate(chunks, 1):
            f.write(f"## –≠—Ç–∞–ø {chunk.stage_number}\n\n")
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            f.write("### üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–ø–µ\n\n")
            f.write(f"- **–ù–æ–º–µ—Ä —ç—Ç–∞–ø–∞:** {chunk.stage_number}\n")
            f.write(f"- **–†–∞–∑–º–µ—Ä:** {chunk.size:,} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write(f"- **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {chunk.heading}\n\n")
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç—Ç–∞–ø–∞
            f.write("### üìù –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n\n")
            f.write("```markdown\n")
            f.write(chunk.text)
            f.write("\n```\n\n")
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
            if i < len(chunks):
                f.write("---\n\n")
    
    print(f"üìÅ –í—Å–µ —ç—Ç–∞–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —ç—Ç–∞–ø–∞–º...")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    input_file = "documents/–õ–û–ì–ò–ö–ê_–ü–†–û–î–ê–ñ–ò_–¢–ï–°–¢–û–í–û–ì–û_–ü–ï–†–ò–û–î–ê_–õ–ò–î–ì–ï–ù–ë–Æ–†–û.md"
    
    # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–µ—Ä
    chunker = SimpleChunker()
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        chunks = chunker.chunk_by_stages(input_file)
        
        if not chunks:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ó–ë–ò–ï–ù–ò–Ø:")
        print("="*60)
        
        total_chars = sum(chunk.size for chunk in chunks)
        
        print(f"üìã –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {len(chunks)}")
        print(f"üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìê –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —ç—Ç–∞–ø–∞: {total_chars // len(chunks):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print(f"\nüîç –†–∞–∑–º–µ—Ä—ã —ç—Ç–∞–ø–æ–≤:")
        for chunk in chunks:
            print(f"   –≠—Ç–∞–ø {chunk.stage_number}: {chunk.size:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*60)
        print("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
        print("="*60)
        
        save_chunks_to_markdown(chunks, "simple_chunks_by_stages.md")
        
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏—Ç –ø–æ —ç—Ç–∞–ø–∞–º.")
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: simple_chunks_by_stages.md")
        
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 